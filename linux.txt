linux登录的账户名和密码 
shike
Ll131415

root权限的密码和这个一样   Ll131415

linux 安装步骤详解   http://www.jb51.net/os/85895.html

ifconfig  看下linux的网络配置，相当于ipconfig

service network restart    重启下这块的网卡

clear  清屏 

service iptables status   查看防火墙的状态

service iptables stop   停止每次开机之后的防火墙

chkconfig iptables off   停止防火墙自动运行

chkconfig --list | grep iptables  检查防火墙的状态

cd /usr/local      打开目录
ls -l /usr    在任何目录下敲这个命令，可以查看usr下面的东西~~
ls -l          列出该目录下面的所有东西
ls -la   列出包含隐藏的文件
ll    列出该目录下面的所有东西，  是上面的简写
vim /etc/sysconfig/network    修改用户名， vim是以编辑的方式打开文件
:q!         退出当前正在编辑的窗口
:wq       退出并保存
pwd， 显示当前的目录路径

-， 代表是文件
d, 代表是文件夹
l   表示软连接文件

r: read 读权限   w: write 写权限     x: execute  执行权限

rm -f spring.doc           删除spring.doc这个文件
rm -rf   ds                    删除ds这个文件夹及里面的所有东西
rm -r   ds                     删除ds这个文件夹

. 代表当前目录       ..   代表上一级目录       cd .. ，  进到上一级的目录中

Linux文件说明
1.文件的rwx
2.硬链接数
3.所有者
4.所属组
5.文件大小（不精确）
6.文件的创建或修改时间
7.文件的名称

Linux 中的文件如： drwxr-xr-x 可以看做三个部分 (rwx r-x r-x),分别是文件的所有者rwx(user)的权限， 所属组r-x(group)的权限和其他人 r-x(other)的权限

touch 文件名                        创建一个空文件
mkdir 文件夹名称                  创建一个文件夹

vi,vim   两者都是编辑文件，但是对于文件有颜色的区别
进去之后， V,I,O才可以进去编辑模式
：/  acc    直接就可以定位到acc的地方
a   在光标后附加文本
A   在本行行末附加文本
i    在光标前插入文本
I    在本行开始插入文本
o   在光标下插入新行
O   在光标上插入新行

set number (set nu)       设置行号
set nonu                       取消行号

~~~~~~~~~~~~~~~~~~~~
x     删除光标所在处字符
nx   删除光标所在处后n个字符
dd  删除光标所在行，ndd删除n行
dG  删除光标所在行到末尾的内容
D    删除从光标所在处到行尾
:n1,n2d   删除指定范围的行

~~~~~~~~~~~~~~~~~~~~~~
yy, Y    复制当前行
nyy, nY  复制当前行以下n行
dd         剪切当前行
ndd       剪切当前行以下n行
p, P       贴在当前光标所在行下或行上


~~~~~~~~~~~~~~~~~~~~~~~
/hello    查找文中的hello   按n依次查找下一个
:%s /1234/5678/g          把所有的1234全部替换成5678(g, 表示全局)
:n1,n2%s /1234/5678/g      在n1,n2行，完成替换
替换的字符串有斜杠， 就要用加号来替换

~~~~~~~~~~~~~~~~~~~~~~~~
:w           保存修改
:wq          保存修改并退出
ZZ           保存修改并退出
:q!           不保存修改退出
:wq!        保存修改并退出(文件所有者可忽略文件的只读属性)

~~~~~~~~~~~~~~~~~~~~~
可以设快捷键的， 例如FOX/FOX






cat a.txt          查看文件a当中的内容，显示内容可能不全
more a.txt       查看文件a的内容，可完全显示。  （使用空格进行翻页，回车显示下一行，q退出/Ctrl+C也是退出）      

cp    a.txt    /usr/local         把a.txt copy 到 /usr/local下去
cp  -r d1 /usr/local/            递归把d1文件夹copy到/usr/local下去

head -4 a.txt                      查看文件a.txt的前4行
tail    -5 a.txt                      查看文件a.txt的后5行

mv  a.txt   aa.txt                将文件a.txt的名字改为aa.txt
mv  a.txt   /usr/local          降文件a.txt移动到/usr/local下面

ln b.sh bb.sh                    新建一个b.sh的硬链接， 相当于copy一份源文件，但是两个会同时更新
ln -s b.sh  bb.sh               新建一个b.sh的软连接， 相当于windows下的快捷方式
硬链接不能跨文件系统分区，而软接连可以的。。。

chmod u+x bb.sh            给文件bb.sh的user加上X的权限
chmod 741  bb.sh          741, 分3份给ugo赋不同的权限

mkdir -p d3/d4/d5         递归创建文件夹， d3,d4,d5

su - shike                     切换用户

权限中的w， 文件的w表示文件可写，  文件夹中的w表示文件夹内可删除

chmod shike p3    修改文件夹p3的所有者为shike

chgrp  adm  p3     修改文件夹p3的所属组为adm

umask -S            查看默认创建的文件/文件夹的权限。。。

find [搜索范围路径] -name,  匹配任意字符*,   匹配指定字符 ?

find /etc -name init
find /etc -name *init
find /etc -name ?init


find /etc -size -9     搜索/etc目录下，size小于9的文件。

Linux,中的数据大小是用数据块表示的，   1M=2个数据块。。。。

find /etc -user root -size +1024       查找etc下的user下的大于1024的文件


find[时间查找] [以天为单位]
天：      ctime， atime，mtime
分钟：   cmin， amin，mmin

c:  change改变文件属性的意思(比如所有者，所属组，权限变更)
a:  access表示被访问过的意思(比如被查看过等)
m:  modify更改内容的意思
在时间前面添加：   -表示之内  +表示之外

find 应用的连接符
     -a (and 的意思，逻辑与)
     -o (or的意思，逻辑或)

find 查找：  根据文件类型进行查找：
     其中： f 表示二进制文件，l表示软连接文件，d表示目录
   
      find /test -type d            查找test目录下的目录


which    查看命令所在的目录位置
        which rm       查看rm命令所在的位置

find ... -exec [执行命令] {} \;
         find /test -name t1.sh -exec rm -f {} \;      查找test目录下名字是t1.sh的文件， 然后把查找的结果放到大括号里，执行删除的操作 

          find /test db -ok ls -l {} \;   查找test目录下的db目录，询问是否要显示db目录的详情

find -inum [i节点标号]
           根据i节点查找文件，在linux系统中，所有的文件都有一个唯一的标识，方便linux内核去调用，这就是i节点。   可以通过  ls -li查看i节点
           find /test -inum 8193       查找test目录下i节点为8193的文件

locate [文件名称]
         查找文件，根据linux数据库内部的索引查，非常快。比find 快多了，但有时候，新create的文件，用locate查不到，这是因为还没有更新到索引呢， 使用 updatedb 来强制更新索引

man [命令或者配置文件]

          帮助命令，非常有用，可以获得命令的帮助文档，如何使用

whatis [命令]
           查看命令的描述

[命令] --help
           查看命令的选项用法


gzip [文件名称]   
         压缩的时候不保留源文件，并且只能压缩文件不能压缩目录

gunzip [已压缩的文件]
           解压缩文件，不保留源文件

tar  zxcf/zvcf
        tar -zxvf sh.tar.gz -C /test    通过tar将sh.tar.gz解压到test目录下
        tar -zxcf t2.tar.gz t2.sh     将t2.sh压缩成t2.tar.gz


ping 192.168.0.111   
       ping -c 6 192.168.0.111   ping6次之后自动断开

ifconfig        查看网卡信息
shutdown -h now     关机
reboot                      重启
crtl + l                      清屏
ctrl + c                     退出应用
tab键                       信息补全

grep   可以将制定内容进行过滤然后输出


管道 |     将一个命令的输出传送给另一个命令，作为另外一个命令的输入。  管道可以连接N个命令

ls -l /etc | grep init    显示出etc下文件名包含init的文件
ls -l /etc | grep init | wc -l    显示出etc下文件名包含init的文件的个数

&&  ||
    逻辑与和逻辑或

输入输出重定向
      shell对每一个进程预先定义了3个文件描述字(0,1,2)
      0,(stdin) 标准输入     1， (stdout) 标准输出      2，(stderr) 标准错误输出
输出重定向： 就是把输出的记过显示到一个文件上(>表示输出重定向)
   ll /test > /test/log.txt    把查看到的ll的目录的结果 重定向到log里面~
         如果想在原来的文件内容进行结果的追加，使用">>"
   
输入重定向
     wall < /test/log.txt     将log.txt中的内容提取到控制台

wall， 是一个广播的命令， 会发送内容给所有的连接的终端

错误重定向     一般是把程序执行的错误日志信息存放到指定的log日志中去

     ll /sdfsdfsdf 2> /test/txt.log
     ll /sfsdfdsfsdfs 2>> /test/txt.log







zip 选项[-r] [压缩后文件名称] [源文件]
       zip的格式生死windows和linux通用的格式，可以压缩文件和目录，压缩目录时需要选项-r

unzip [解压缩的文件]
        进行解压缩， 最后配置加-d 表示文件解压后存放的路径      








java 环境变量在这个目录下面   
     etc/profile

source etc/profile     让配置的环境变量生效


用户管理配置文件
    用户信息文件：   /etc/passwd
    密码文件:           /etc/shadow
    用户配置文件     /etc/login.defs    /etc/default/useradd
    新用户信息文件   /etc/skel
    用户组文件         /etc/group
    用户组密码文件   /etc/gshadow

shike:x:500:500:shike:/home/shike:/bin/bash
用户名，密码位， UID 用户标识号， GID 缺省组标识号， 注释性描述 存放用户全民等信息， 宿主目录 用户登录系统后的缺省目录， 命令解释器 用户使用的shell 默认为bash

root:$6$x7I8FeFEdMhqs4V7$B6AXLeLWB0cN59khddC.8ShypSfUW0c449inL7mzE3pgu66UCL4ZA2XtRJi4DDzLVmxGYenXBSkffXDkum.2H.:17585:0:99999:7:::
用户名， 加密密码， 最后一次修改时间， 最小时间间隔 两次修改密码之间的最小天数， 最大时间间隔  密码保持有效的最多天数 ， 警告时间 从系统开始警告到密码失效的天数，  账号闲置的时间，  失效时间 密码失效的绝对天数，  标志 一般不使用




Linux 用户一般分为三种，
    超级用户(root UID = 0)
    普通用户(UID 500-60000)
    伪用户(UID 1-499)      伪用户一般是linux系统和进程服务相关的。 在linux系统里的任何的进程操作都必须要有一个用户身份。比如我们进行关机操作，其实就是调用了一个系统的伪用户的身份。 伪用户一般无法登陆系统。



用户组管理命令
  添加用户组：  groupadd [配置选项] [组名]
      groupadd -g 1001 webs
  删除用户组     groupdel [组名]
       group webs
  修改用户组    groupmod -n [新组名] [旧组名]
  查看用户属于那些组:
       groups shike

添加用户useradd
u:UID
g:缺省所属用户组的名称或GID
G: 指定用户所属多个组
d: 宿主目录
s: 命令解释器Shell
c: 描述信息
e: 指定用户失效时间

useradd -u 1002 -g webapps -G sys,root -d /web -s /bin/bash -c "is a u2" -e 2015-12-12 u2      新加用户u2

userdel -r [用户名] 
     userdel -r u3      删除这个用户

usermod -l [新用户名] [旧用户名] 
      usermod -l u3 u2  修改u3名字为u2

禁用和恢复用户
    usermod -L [用户名]
    passwd  -l  [用户名]

恢复
     usermod -U [用户名]
     passwd   -u   [用户名] 


用户组操作
   命令  gpasswd
          -a  添加用户到用户组中
          -d  从用户组中删除用户
           -A   设置用户组管理员
         gpasswd -a u1 webapps   添加u1用户到用户组webapps中

用户组授权
chgrp g1 /test/software    
chgmod 777 /test/software

~~~~~~~~~~~~~~~~~~~
在Linux系统中，分为前台进程和后台进程。  前台进程的意思是当一个命令执行的过程中， 不允许另外其他的命令执行，只能等待该命令执行完毕后(也就是该进程结束后)才能执行其他命令， 我们之前所学习的常用命令，基本上都是前台进程
 
find / -name init                    前台进程
find / -name init&                 后台进程


w     查看用户信息

TTY，  表示以什么方式登录这个计算机(pts/0 远程登录)
FROM,   表示从什么位置登录的
LOGIN@,   表示登录时间
IDLE,       表示用户闲置的时间
JCPU,      表示当前这个用户执行的所有进程所耗时的总和 
PCPU,    表示执行程序耗费的时间
load avegage,   表示系统的负载值， 分别显示过去的1,5,15分钟系统的负载程度， 如果想知道系统的平均负载 三者之和除3即可， 最终结果如果在0.8以下表示系统正常。
what：  表示当前执行的什么任务


ps  
    -a,       显示所有用户的进程
     -l,       长格式显示
  STAT， 当前状态， S休眠  D 不可中断的休眠状态   R 运行状态   Z 僵死状态   T 停止
   UID,    表示当前启动进程的用户
   PID,    进程号
   PPID,  父进程号
   TTY，  进程启动的终端 
   IN，   进程的优先级
   TIME，  进程启动以来占用的实际时间
  CMD ,    进程的命令


ps  -el  查看所有的进程，包括没有终端的进程
      ps -el --sort pid (进行对进程排序， 也可以使用其他字段排序)
ps -aux   这个命令可以显示当前进程占用CPU 和内存的百分比
      ps -aux | grep rpc   (对进程结果进行过滤)



~~~~~~~
杀死进程
       kill  [进程号] 关闭进程   kill  1234
       kill  -9  [进程号]  强制关闭进程   kill  -9 1234
       kill -1 [进程号]  重启进程   kill -1 1234
       xkill 关闭图形程序
       killall  结束所有进程
       查找服务进程号：   pgrep[服务名称]
       关闭进程    pkill[进程名称]   pkill redis


nohup   program & 
        使进程在用户退出登录后仍旧继续执行

终止一个程序的运行：  ctrl +c
挂起一个程序的运行：  ctrl +z

jos   
    把任务恢复到前台继续执行 fg  [任务编号]
    把任务恢复到后台继续执行 bg  [任务编号]

 
top
    d：  指定刷新的时间间隔
    c,     显示整个命令行的详细信息
    u，  可以查看指定用户的进程
    k,    终止正在执行的进程
进程状态显示和进程控制， 每5秒钟自动刷新一次(动态显示) 

~~~~~~~~~~~~~~~~~~~~~~~~
任务计划
   at  安排作业在某一时刻执行一次
   cron   安排周期性运行的作业


at [-f 文件名] 时间
   绝对计时方法:   HH:MM YYYY-MM-DD
   相对计时方法:   now+n minutes   now + n hours  now + n days
   （ctrl+d 保存任务退出）

  at -d or atrm 删除队列中的任务
  at -l or atq   查看队列中的任务
  如果/etc/at.allow  存在  则在里面的用户可以使用at执行计划
  如果/etc/at.deny  存在   则在里面的用户不可以使用at执行计划
  如果文件都不存在， 则只有root可以使用at执行计划

 
crontab 
    -l  显示当前的crontab
   -r   删除当前的crontab
   -e  使用编辑器编辑当前的crontab
    文件描述， 用于生成cron进程所需要的crontab文件

如果crontab程序没有启动，则需要手工启动:
ps -el | grep crond                    看crond进程是否启动着
/etc/rc.d/init.d/crond start        启动crond进程
crontab文件建立好以后可以到/var/spool/cron 目录确认

1.   crontab  -e  进入到一个文本编辑模式
*/1  *   *    1-3 *  /usr/bin/wall < log.txt


~~~~~~~~~~~~~~~~~~~~~~~~
系统文件构成

/usr/bin, /bin   存放所有用户可以执行的命令
/usr/sbin,  /sbin   存放只有root可以执行的命令
/home    用户缺省的宿主目录
/proc   虚拟文件系统， 存放当前进程信息
/dev   存放设备文件
/lib   存系统程序运行所需的共享库
/lost+found  存放以下系统出错的检查结果
/temp  存放临时文件
/etc    存放系统配置文件
/var   包含经常发生变动的文件， 如日志文件
/usr   存放所有命令，库，手册等
/boot  内核文件及自举程序文件保存位置
/mnt   临时文件系统的安装点


~~~~~~~~~~~~~~~~~~~~~
 软件包管理
   安装  yum install [软件包名称]
   安装telnet    
   安装 gcc  

~~~~~~~~~~~~~~~~~~~~~
echo     输出后面的东西， 相当于system.out.println()
sh ex1.sh       执行ex1.sh  的内容哈

df -h      输出系统的分区的内存信息
cd /bin,   cd /usr/bin    这两个目录下面放的是所有的命令

~~~~~
ex2.sh

#!/bin/sh
/bin/date +%F >> /test/shelldir/ex2.info                 格式化输出日期。
echo "disk info" >> /test/shelldir/ex2.info               
/bin/df -h >> /test/shelldir/ex2.info                           
echo "online users" >> /test/shelldir/ex2.info
/usr/bin/who | /bin/grep -v root >> /test/shelldir/ex2.info     -v 就是取相反的
echo "memory info" >> /test/shelldir/ex2.info                        
/usr/bin/free -m >> /test/shelldir/ex2.info                          free -m, 显示内存使用情况  
echo >> /test/shelldir/ex2.info
#write boot
/usr/bin/write root < /test/shelldir/ex2.info && /bin/rm       write root 相当于 写到root这个用户当中去
/test/shelldir/ex2.info
#crontab -e
#0 9 * * 1-5 /bin /sh /test/ex2.sh 



~~~~~~~~~~~~~~~~~~~~~~~
变量， 是shell传递数据的一种方法， 用来代表每个取值的符号名。
shell有两类变量：  临时变量和永久变量
临时变量是shell程序内部定义的， 其使用范围仅限于定义它的程序，对其他程序不可见，包括： 用户自定义变量，位置变量、  永久变量是环境变量，其值不随shell脚本的执行结束而消失
永久变量：
         echo   $PATH
         
         echo    $LANG


变量的自定义：
用户定义的变量是由字母或下划线开头，由字母，数字或下划线序列组成，并且大小写字母意义不同。变量名长度没有限制。在使用变量值时，要在变量名前加上前缀"$".  一般变量使用大写字母表示， 并且是英文字母开头，赋值号"=" 两边应没有空格，如 NUM=5， STR="A String"
可以将一个命令的执行结果赋值给变量： 但是需要使用命令替换符号(1前边的那个数字)
注意单引号和双引号的区别，""号是会把里面的变量值进行输出， '' 是会把内容原封不动输出， 不会识别里面的变量。
使用set命令查看所有的变量。
使用unset命令删除指定的变量

双引号和单引号的区别
 STR="is string"  
 echo $STR
 echo "i am is string"
 echo "i am $STR"
 echo  'i am $STR'

P1=`date`                   这个逗号是命令替换符号，是1前边的那个数字
echo $P1                      输出的结果会是当前的日期的

P2=$P1                    将P2命令赋值给P1


~~~~~~~~~~~~~~~~~~
$1,$2,....$9,  占位符
sh ex3.sh /test /test/shelldir/ /usr/local

ex3.sh
#!/bin/sh
DATE=`/bin/date +%Y%m%d`
echo "TODAY IS $DATE"
/bin/ls -l $1
/bin/ls -l $2
/bin/ls -l $3

$1,$2,$3, 相当于3个方法的参数，接受上面的值

~~~~~~~~~~~~~~~~~~~
特殊变量
$*    这个程序的所有参数
$#   这个程序的参数个数
$$  这个程序的PID
$!    执行上一个后台命令的PID
$?   执行上一个命令的返回值
$(0-9) 显示位置变量


~~~~~~~~~~~~~~~~~~~~~~
read， 键盘录入
sh -x /test/sh/ex5.sh    -x, 是跟踪的意思


~~~~~~~~~~~~~~~~~~~~
expr命令，对整数进行运算
注意点： 1 expr 的运算必须用空格间隔开
              2  \* 表示转义字符
              3  保持先算乘数后算加减，如果需要优先运算则需要加命令替换福
              4   也可以对变量进行运算操作


test
使用test命令可以对文件，字符串等进行测试， 一般配合控制语句使用，不应该单独使用。 如下：
test str1=str2
test int1 -eq int2
test -d file
-f,是否常规文件
-x， 是否可执行
-r， 是否可读
-w， 是否可写
-a， 是否存在
-s ，  是否非0

~~~~~~~~~~~~~~~~~~~~~~~
if语句
语法格式：  if test -d $1 then ... else  ....fi
变量测试语句可用[]进行简化， 如test -d $1等价于[-d $1 ]
注意： ["空格" -d "空格"$1 "空格"]


~~~~~~~~~~~~~~~~~~~~~~~
逻辑与和逻辑或
-a    
-o
 

~~~~~~~~~~~~~~~~~~~~~~~~
select 循环（ex10.sh)
格式： 
select 变量 in 列表
do
    cmd.....
done

~~~~~~~~~~~~~~~~~
case语句(ex11.sh)
case .... esac 语句，格式:
case 变量 in
        字符串 1)  命令列表;;
        ......
        字符串n)  命令列表n;;
esac

 ~~~~~~~~~~~~~~~~~
while 语句，格式：(ex12.sh)
while  条件
do 
     命令
done


~~~~~~~~~~~~~~~~~~
continue 跳出本次循环
break， 跳出大循环


